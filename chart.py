import streamlit as st
import pandas as pd
import plotly.express as px
from streamlit_option_menu import option_menu
from numerize.numerize import numerize
import time
from streamlit_extras.metric_cards import style_metric_cards

from query import *

# st.set_option('deprecation.showPyplotGlobalUse', False)
import plotly.graph_objs as go

theme_plotly = None
st.set_page_config(page_title="Dashboard",page_icon="üåç",layout="wide")
st.sidebar.image("./templates/logohbi-PHUBAI.jpg", caption="HBI", width=250)


if "selected_data" not in st.session_state:
    st.session_state["selected_data"] = None

def first_page():
    st.header(":bar_chart: TH·ªêNG K√ä B√ÅO C√ÅO ƒê√ÄO T·∫†O THEO TU·∫¶N HBI")
    result = week_training_reportabc()
    # df=pd.DataFrame(result,columns=["KEYE","ID","Name","Line","Shift","Plant","Operation","Type_training","Week_start","TuanraSX","Technician","StartDate","NgayraSX"])
    # st.dataframe(df)
    week_data = pd.DataFrame(result,columns=["KEYE", "ID", "Name", "WEEK", "YEAR", "Operation", "chatluong", "ChitieuCL", "DanhgiaCL",
                                             "total_time_week", "total_time", "Ngaydaotao", "TuanLC", "Hieusuat_tuan", "ChitieuHS", "DanhgiaHS", "ttRaSX"])

    # SWITCHER
    WEEK=st.sidebar.multiselect(
        "Ch·ªçn tu·∫ßn",
         options=week_data["WEEK"].unique(),
         default=week_data["WEEK"].unique(),
    )
    Operation=st.sidebar.multiselect(
        "Ch·ªçn c√¥ng ƒëo·∫°n",
         options=week_data["Operation"].unique(),
         default=week_data["Operation"].unique(),
    )
    DanhgiaCL=st.sidebar.multiselect(
        "Ch·ªçn ch·∫•t l∆∞·ª£ng",
         options=week_data["DanhgiaCL"].unique(),
         default=week_data["DanhgiaCL"].unique(),
    )
    DanhgiaHS=st.sidebar.multiselect(
        "Ch·ªçn hi·ªáu su·∫•t",
         options=week_data["DanhgiaHS"].unique(),
         default=week_data["DanhgiaHS"].unique(),
    )
    Ngaydaotao=st.sidebar.multiselect(
        "Ch·ªçn ng√†y ƒë√†o t·∫°o",
         options=week_data["Ngaydaotao"].unique(),
         default=week_data["Ngaydaotao"].unique(),
    )
    TuanLC=st.sidebar.multiselect(
        "Tu·ª≥ ch·ªçn TuanLC",
         options=week_data["TuanLC"].unique(),
         default=week_data["TuanLC"].unique(),
    )

    ttRaSX=st.sidebar.multiselect(
        "Ch·ªçn th·ª© t·ª± tu·∫ßn ra s·∫£n xu·∫•t",
         options=week_data["ttRaSX"].unique(),
         default=week_data["ttRaSX"].unique(),
    )


    df_selection=week_data.query(
        "WEEK==@WEEK & DanhgiaCL==@DanhgiaCL & Operation ==@Operation  & Ngaydaotao ==@Ngaydaotao & TuanLC==@TuanLC & DanhgiaHS ==@DanhgiaHS  & ttRaSX ==@ttRaSX "
    )

    # st.dataframe(df_selection)



    with st.expander("File d·ªØ li·ªáu b√°o c√°o ƒë√†o t·∫°o h√†ng tu·∫ßn"):
        showData=st.multiselect('Filter: ',df_selection.columns,default=["KEYE", "ID", "Name", "WEEK", "YEAR", "Operation", "chatluong", "ChitieuCL", "DanhgiaCL",
                                         "total_time_week", "total_time", "Ngaydaotao", "TuanLC", "Hieusuat_tuan", "ChitieuHS", "DanhgiaHS", "ttRaSX"])
        st.dataframe(df_selection[showData],use_container_width=True)
    #compute top analytics
    total_employee = float(pd.Series(df_selection['ID']).count())
    datCL = float(pd.Series(df_selection['DanhgiaCL'] == "ƒê·∫°t").sum())
    khongdatCL = float(pd.Series(df_selection['DanhgiaCL'] == "Kh√¥ng ƒë·∫°t").sum())
    datHS = float(pd.Series(df_selection['DanhgiaHS'] == "ƒê·∫°t").sum())
    khongdatHS = float(pd.Series(df_selection['DanhgiaHS'] == "Ch∆∞a ƒë·∫°t").sum())

    # investment_mean = float(pd.Series(df_selection['Investment']).mean())
    # investment_median= float(pd.Series(df_selection['Investment']).median())
    # rating = float(pd.Series(df_selection['Rating']).sum())


    total1,total2,total3,total4,total5=st.columns(5,gap='small')
    with total1:
        # st.info('T·ªïng s·ªë nh√¢n vi√™n',icon="üí∞")
        st.metric(label=":white_check_mark: T·ªïng s·ªë nh√¢n vi√™n ",value=f"{total_employee:,.0f}")

    with total2:
        # st.info('S·ªë nh√¢n vi√™n ƒë·∫°t ch·∫•t l∆∞·ª£ng',icon="üí∞")
        st.metric(label=":heavy_check_mark: T·ªïng s·ªë nh√¢n vi√™n ƒë·∫°t ch·∫•t l∆∞·ª£ng",value=f"{datCL:,.0f}")


    with total3:
        # st.info('S·ªë nh√¢n vi√™n kh√¥ng ƒë·∫°t ch·∫•t l∆∞·ª£ng',icon="üí∞")
        st.metric(label=":x: T·ªïng s·ªë nh√¢n vi√™n kh√¥ng ƒë·∫°t ch·∫•t l∆∞·ª£ng",value=f"{khongdatCL:,.0f}")

    with total4:
        # st.info('Central Earnings',icon="üí∞")
        st.metric(label=":heavy_check_mark: T·ªïng s·ªë nh√¢n vi√™n ƒë·∫°t hi·ªáu su·∫•t",value=f"{datHS:,.0f}")

    with total5:
        # st.info('Central Earnings', icon="üí∞")
        st.metric(label=":x: T·ªïng s·ªë nh√¢n vi√™n kh√¥ng ƒë·∫°t hi·ªáu su·∫•t", value=f"{khongdatHS:,.0f}")

    # with total5:
    #     st.info('Ratings',icon="üí∞")
    #     st.metric(label="Rating",value=numerize(rating),help=f""" Total Rating: {rating} """)
    # style_metric_cards(background_color="#FFFFFF",border_left_color="#686664",border_color="#000000",box_shadow="#F71938")

    # #variable distribution Histogram
    # with st.expander("DISTRIBUTIONS BY FREQUENCY"):
    #  df.hist(figsize=(16,8),color='#898784', zorder=2, rwidth=0.9,legend = ['Investment']);
    #  st.pyplot()

# Home()


# graphs
# def graphs():
    # # Convert Hieusuat_tuan to numeric (handle potential errors)
    # df_selection["Hieusuat_tuan"] = pd.to_numeric(df_selection["Hieusuat_tuan"], errors='coerce')


    hieusuat_chart = (df_selection.groupby(by=["Operation"], as_index = False)["Hieusuat_tuan"].mean())

    hieusuat_chart = px.bar(
        hieusuat_chart,
        x="Hieusuat_tuan",
        y="Operation",
        orientation="h",
        title="<b> BI·ªÇU ƒê·ªí HI·ªÜU SU·∫§T TRUNG B√åNH THEO C√îNG ƒêO·∫†N </b>",
        color_discrete_sequence=["#0083B8"] * len(hieusuat_chart),
        template="plotly_white",
    )

    hieusuat_chart.update_layout(
        yaxis_title="C√îNG ƒêO·∫†N",
        xaxis_title="Hi·ªáu su·∫•t trung b√¨nh",
        plot_bgcolor="rgba(0,0,0,0)",
        font=dict(color="black"),
        yaxis=dict(showgrid=True, gridcolor='#cecdcd'),  # Show y-axis grid and set its color
        paper_bgcolor='rgba(0, 0, 0, 0)',  # Set paper background color to transparent
        xaxis=dict(showgrid=True, gridcolor='#cecdcd'),  # Show x-axis grid and set its color
    )



    hieusuat_tuanchart = df_selection.groupby(by=["WEEK", "YEAR"], as_index = False)["Hieusuat_tuan"].mean()

    hieusuat_tuanchart = px.line(
        hieusuat_tuanchart,
        x="WEEK",
        y="Hieusuat_tuan",
        orientation="v",
        title="<b> BI·ªÇU ƒê·ªí HI·ªÜU SU·∫§T TRUNG B√åNH THEO TU·∫¶N </b>",
        color_discrete_sequence=["#0083b8"] * len(hieusuat_tuanchart),
        template="plotly_white",
    )
    hieusuat_tuanchart.update_layout(
        yaxis_title="Hi·ªáu su·∫•t trung b√¨nh",
        xaxis_title="Tu·∫ßn",
        xaxis=dict(tickmode="linear"),
        plot_bgcolor="rgba(0,0,0,0)",
        yaxis=(dict(showgrid=False))
    )

    # bi·ªÉu ƒë·ªì tr√≤n
    count_cd = df_selection.groupby(by=["Operation"], as_index=False)["ID"].count().rename(columns={"ID": "Count_ID"})
    # pie chart
    fig = px.pie(count_cd, values='Count_ID', names='Operation', title='BI·ªÇU ƒê·ªí S·ªê L∆Ø·ª¢NG NH√ÇN VI√äN THEO C√îNG ƒêO·∫†N')
    fig.update_layout(legend_title="C√¥ng ƒëo·∫°n", legend_y=1)
    fig.update_traces(textinfo='percent+label', textposition='inside')
    # st.plotly_chart(fig, use_container_width=True, theme=theme_plotly)

    left, right, center = st.columns(3)
    left.plotly_chart(hieusuat_tuanchart, use_container_width=True)
    center.plotly_chart(fig, use_container_width=True)
    right.plotly_chart(hieusuat_chart, use_container_width=True)

# graphs()

def second_page():
    st.header(":chart: TH·ªêNG K√ä K·∫æT QU·∫¢ ƒê√ÄO T·∫†O HBI")
    result = view_all_data()
    # df=pd.DataFrame(result,columns=["KEYE","ID","Name","Line","Shift","Plant","Operation","Type_training","Week_start","TuanraSX","Technician","StartDate","NgayraSX"])
    # st.dataframe(df)
    result_reporta = pd.DataFrame(result,columns=["ID", "Name", "Line", "Shift", "Operation", "Type_training", "NgayraSX",
                                      "Technician", "TuanP2K_max", "Eff_max", "Hieusuatgannhat", "ChitieuHS", "NgayTN",
                                      "TTtuanTN", "Status", "Note", "AMT_week"])

# SWITCHER
    Shift=st.sidebar.multiselect(
        "Ch·ªçn ca l√†m vi·ªác",
         options=result_reporta["Shift"].unique(),
         default=result_reporta["Shift"].unique(),
    )
    Operation=st.sidebar.multiselect(
        "Ch·ªçn c√¥ng ƒëo·∫°n",
         options=result_reporta["Operation"].unique(),
         default=result_reporta["Operation"].unique(),
    )
    Type_training=st.sidebar.multiselect(
        "Ch·ªçn lo·∫°i ƒë√†o t·∫°o",
         options=result_reporta["Type_training"].unique(),
         default=result_reporta["Type_training"].unique(),
    )
    Technician = st.sidebar.multiselect("Pick your Region", result_reporta["Technician"].unique())
    # Technician=st.sidebar.multiselect(
    #     "Ch·ªçn hi·ªáu su·∫•t",
    #      options=result_reporta["Technician"].unique(),
    #      default=result_reporta["Technician"].unique(),
    # )
    Status=st.sidebar.multiselect(
        "Tr·∫°ng th√°i",
         options=result_reporta["Status"].unique(),
         default=result_reporta["Status"].unique(),
    )
    AMT_week=st.sidebar.multiselect(
        "S·ªë tu·∫ßn trong AMT",
         options=result_reporta["AMT_week"].unique(),
         default=result_reporta["AMT_week"].unique(),
    )

    df_selection=result_reporta.query(
        "Shift==@Shift & Operation==@Operation & Type_training ==@Type_training  & Technician ==@Technician & Status==@Status & AMT_week ==@AMT_week"
    )






selected_page = st.sidebar.selectbox("CH·ªåN B√ÅO C√ÅO", ["B√°o c√°o ƒë√†o t·∫°o theo tu·∫ßn", "B√°o c√°o k·∫øt qu·∫£ ƒë√†o t·∫°o"])
if selected_page == "B√°o c√°o ƒë√†o t·∫°o theo tu·∫ßn":
    first_page()
elif selected_page == "B√°o c√°o k·∫øt qu·∫£ ƒë√†o t·∫°o":
    second_page()
